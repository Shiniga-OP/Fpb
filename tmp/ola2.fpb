/*
comentarios
multi linhas
suportados
*/
#incluir "biblis/impressao.asm";
#incluir "biblis/texs.asm";
#incluir "biblis/mem.asm";

/* pré definição */
vazio testeAlteracoes(int s, int numero, car letra, bool flag);
vazio testeOperacoes();
vazio testeComparacoes();
vazio testeMemoria();
vazio testeLoops();
int textam(car* texto);
int texcar(car* texto, car alvo);
vazio subscar(car[] array, car alvo, car novo);
vazio memcp(car[] array, car* p, int tam);

int somar(int a, int b) {
   escrever("valor a: ", a, "\n");
   escrever("valor b: ", b, "\n");
   retorne a + b;
}

vazio inicio() {
    escrever("Testando tipos básicos:\n");
    car letra = 'A';
    escrever("\ncaractere: ", letra);
    int numero = 42;
    escrever("\ninteiro: ", numero);
    flu pi = 3.14;
    escrever("\nflutuante: ", pi);
    bool flag = 1;
    escrever("\nbooleano: ", flag);

    escrever("\n\nTestando função soma:\n");
    int s = somar(5, 7);
    escrever("\nsoma com retorno 5 + 7 = esperando 12, veio: ", s);
    testeAlteracoes(s, numero, letra, flag);
}

vazio testeAlteracoes(int s, int numero, car letra, bool flag) {
    s = 5 + 7;
    escrever("\nsoma comum 5 + 7 = esperando 12, veio: ", s);

    escrever("\n\nTestando atribuições:\n");
    numero = 100;
    letra = 'Z';
    flag = 0;
    escrever("\nnovo inteiro: ", numero);
    escrever("\nnovo caractere: ", letra);
    escrever("\nnovo booleano: ", flag, "\n");
    // teste operações:
    testeOperacoes();
    testeComparacoes();
    testeLoops();
    testeMemoria();
}

vazio testeOperacoes() {
    escrever("\n\nTeste de operações matematicas:\n");
    // testando ordem de precedencia:
    escrever("operação 5 + 5 * 5, esperado: 30, veio: ", 5 + 5 * 5, "\n");
    escrever("operação (5 + 5) * 5, esperado: 50, veio: ", (5 + 5) * 5, "\n");

    escrever(5 + 5, "\n"); // expressão direta
    escrever(somar(5, 5), "\n"); // retorno passado direto
}

vazio testeComparacoes() {
    escrever("\nTeste comparações:\n\n");
    int x = 4;

    se(x > 5) {
        escrever("x é maior que 5\n");
    } senao se(x >= 5) {
        escrever("x é maior ou igual a 5\n");
    } senao escrever("x não é maior nem igual a 5\n");
}

vazio testeMemoria() {
    escrever("\nTeste de array:\n");
    car[] array = "texto";
    escrever("\nvalor do array: ", array);
    array[0] = 'X';
    escrever("\narray mudado no indice 0: ", array);

    escrever("\n\nTeste de ponteiro:\n");
    car* ponteiro = "exemplo de ponteiro";
    
    escrever("\nponteiro texto, valor: ", ponteiro, "\ntamamho em bytes: ", textam(ponteiro));
    
    int i = texcar(ponteiro, 't');

    se(i >= 0) escrever("\no ponteiro tem t no indice: ", i);
    senao escrever("\no ponteiro não tem t\n");
    
    escrever("\nTeste de manipulação da memoria:\n");
    car[] array = "exemplo";
    escrever("\nArray padrão: ", array);
    
    car* p = "XxXmplo maior";
    
    memcp(array, p, textam(p));
    escrever("\nArray copiado da memoria: ", array);
    
    subscar(array, 'X', 'e');
    
    escrever("\nArray usando subscar(array, 'X', 'e'): ", array);
    
    escrever("\nTeste de acesso a itens array:\n");
    car ca = array[0];
    escrever("item do indice 0 do array: ", ca);
}

vazio testeLoops() {
    escrever("\n\nTeste de loops");
    escrever("\nEnquanto:");
    int i = 0;
    enq(i < 10) {
        escrever("\nvalor de i: ", i);
        i = i + 1;
    }
}